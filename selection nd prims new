#SELECTION SORT
def selection_sort(arr):
    for i in range(len(arr)):
        min_idx = i
        for j in range(i+1, len(arr)):
            if arr[j] < arr[min_idx]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
    return arr

# Example
nums = [73, 29, 2, 44, 1]
print("Sorted array:", selection_sort(nums))


#Primâ€™s Minimum Spanning Tree

import heapq

def prims_algo(graph, start):
    visited = set()
    mst = []
    heap = [(0, start, None)]

    while heap:
        cost, u, prev = heapq.heappop(heap)
        if u not in visited:
            visited.add(u)
            if prev:
                mst.append((prev, u, cost))
            for v, wt in graph[u]:
                if v not in visited:
                    heapq.heappush(heap, (wt, v, u))
    return mst

# Example graph
graph = {
    'A': [('B', 2), ('C', 11)],
    'B': [('A', 8), ('D', 4)],
    'C': [('A', 10), ('D', 5)],
    'D': [('B', 6), ('C', 5)]
}

mst = prims_algo(graph, 'A')
print("Minimum Spanning Tree:", mst)
